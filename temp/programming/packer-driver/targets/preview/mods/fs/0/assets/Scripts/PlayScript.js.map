{"version":3,"sources":["file:///Users/naushad/BricksBreaker/assets/Scripts/PlayScript.ts"],"names":["_decorator","Component","Node","Sprite","Vec3","SpriteFrame","Prefab","instantiate","JsonAsset","Collider2D","Contact2DType","RigidBody2D","ccclass","property","PlayScript","start","posOfSlider","sliderSprite","getPosition","screenWidth","node","width","addBricks","titleList","asset","json","console","log","collider","ball","getComponent","on","BEGIN_CONTACT","onBeginContact","ballInitialPosition","selfCollider","otherCollider","contact","name","updateBricks","destroyBrick","arrayOfBricksOnScreen","pop","length","setTimeout","setPosition","gravityScale","str","spriteFrame","i","NormalBricks","BrokenBricks","destroy","moveSliderOnTouch","touch","event","current","getUILocation","x","y","onLoad","EventType","TOUCH_MOVE","onClick","titleIndex","row","column","startPosOfBricks","Math","floor","xy","j","random","ch","bricksPrefab","addChild","push","update"],"mappings":"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","sourcesContent":["\r\nimport { _decorator, Component, Node, SpriteComponent, Sprite, Vec3, UIComponent, UIModelComponent, SpriteFrame, Prefab, instantiate, JsonAsset, Collider2D, Contact2DType, IPhysics2DContact, PhysicsSystem2D, RigidBody, RigidBody2D } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n/**\r\n * Predefined variables\r\n * Name = PlayScript\r\n * DateTime = Wed Sep 22 2021 13:48:26 GMT+0530 (India Standard Time)\r\n * Author = alokraj0024\r\n * FileBasename = PlayScript.ts\r\n * FileBasenameNoExtension = PlayScript\r\n * URL = db://assets/Scripts/PlayScript.ts\r\n * ManualUrl = https://docs.cocos.com/creator/3.3/manual/en/\r\n * Math.floor(Math.random() * (max - min + 1)) + min;\r\n */\r\n \r\n@ccclass('PlayScript')\r\nexport class PlayScript extends Component {\r\n\r\n    @property(Node)\r\n    sliderSprite : Node = null;\r\n\r\n    @property(Node)\r\n    ball : Node = null;\r\n\r\n    @property(SpriteFrame)\r\n    NormalBricks : SpriteFrame[] = [];\r\n\r\n    @property(SpriteFrame)\r\n    BrokenBricks : SpriteFrame[] = [];\r\n\r\n    @property(Prefab)\r\n    bricksPrefab : Prefab = null;\r\n\r\n    @property(JsonAsset)\r\n    asset : JsonAsset = null;\r\n\r\n\r\n    posOfSlider : Vec3 = null;\r\n    screenWidth : any;\r\n    titleList: string[] = [];\r\n    titleIndex: number = 1;\r\n    destroyBrick : number = 0;\r\n    arrayOfBricksOnScreen : any[] = [];\r\n    ballInitialPosition : any;\r\n\r\n    start () {\r\n        this.posOfSlider = this.sliderSprite.getPosition();\r\n        this.screenWidth = this.node.width;\r\n        this.addBricks();\r\n        this.titleList = this.asset.json[\"tileDetails\"];\r\n        console.log('row ' + this.titleList[\"row\"])\r\n        console.log('json');\r\n        //console.log(this.asset.json[\"Level\"][0]);\r\n        //console.log(this.asset.json[\"Level\"][2]);\r\n\r\n        let collider = this.ball.getComponent(Collider2D)\r\n        if(collider)\r\n        {\r\n            collider.on(Contact2DType.BEGIN_CONTACT,this.onBeginContact,this);\r\n        }\r\n        this.ballInitialPosition = this.ball.getPosition();\r\n        this.addBricks();\r\n    }\r\n\r\n    onBeginContact (selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\r\n        console.log(selfCollider);\r\n        console.log(otherCollider);\r\n        console.log(otherCollider.name);\r\n        if(otherCollider.name == 'brick<BoxCollider2D>')\r\n        {\r\n            this.updateBricks(otherCollider);\r\n            this.destroyBrick++;\r\n            if(this.destroyBrick == 2)\r\n            {\r\n                this.arrayOfBricksOnScreen.pop();\r\n                this.destroyBrick = 0;\r\n            }\r\n        }\r\n        if(this.arrayOfBricksOnScreen.length == 0)\r\n        {\r\n            this.arrayOfBricksOnScreen = [];\r\n            setTimeout(() => {\r\n                this.addBricks();\r\n                this.ball.setPosition(this.ballInitialPosition);\r\n                this.ball.getComponent(RigidBody2D).gravityScale = 0.4;\r\n            },500);\r\n        }\r\n    }\r\n\r\n    updateBricks(collider)\r\n    {\r\n        let str = collider.getComponent(Sprite).spriteFrame.name;\r\n        console.log(str);\r\n        for(let i=0;i<this.NormalBricks.length;i++)\r\n        {\r\n            //console.log()\r\n            if(str == this.NormalBricks[i].name)\r\n            {\r\n                collider.getComponent(Sprite).spriteFrame = this.BrokenBricks[i];\r\n                break;\r\n            }\r\n            if(str == this.BrokenBricks[i].name)\r\n            {\r\n                collider.getComponent(Sprite).spriteFrame = this.BrokenBricks[i];\r\n                collider.getComponent(Sprite).destroy();\r\n                collider.destroy();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    moveSliderOnTouch(touch,event)\r\n    {\r\n        let current = touch.getUILocation();\r\n        if(current.x+128>this.screenWidth)\r\n        {\r\n            current.x = this.screenWidth-128;\r\n        }\r\n        else if(current.x-128<0)\r\n        {\r\n            current.x = 128;\r\n        }\r\n        this.sliderSprite.setPosition(new Vec3(current.x-this.screenWidth/2,this.posOfSlider.y,1));\r\n    }\r\n    onLoad()\r\n    {\r\n        this.sliderSprite.on(Node.EventType.TOUCH_MOVE,this.moveSliderOnTouch,this);\r\n    }\r\n\r\n    onClick()\r\n    {\r\n        let str = this.titleList[this.titleIndex];\r\n        console.log(str);\r\n        this.titleIndex++;\r\n        if(this.titleIndex>13)\r\n            this.titleIndex = 1;\r\n    }\r\n\r\n    addBricks()\r\n    {\r\n        let row = 4;\r\n        let column = 4;\r\n        let startPosOfBricks = Math.floor(column/2) * -128;\r\n        for(let i=1;i<=row;i++)\r\n        {\r\n            let xy = startPosOfBricks;\r\n            for(let j=1;j<=column;j++)\r\n            {\r\n                let x = Math.floor(Math.random() * (7 - 0 + 1)) + 0;\r\n                let ch = instantiate(this.bricksPrefab);\r\n                ch.getComponent(Sprite).spriteFrame = this.NormalBricks[x];\r\n                this.node.addChild(ch);\r\n                ch.setPosition(new Vec3(xy,i*43,1));\r\n                this.arrayOfBricksOnScreen.push(ch);\r\n                xy+=128;\r\n            }\r\n        }\r\n    }\r\n    update()\r\n    {   \r\n        //console.log(this.ball.getPosition())\r\n    }\r\n    // update (deltaTime: number) {\r\n    //     // [4]\r\n    // }\r\n}\r\n\r\n"]}