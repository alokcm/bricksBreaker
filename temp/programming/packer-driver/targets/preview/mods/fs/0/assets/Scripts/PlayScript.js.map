{"version":3,"sources":["file:///Users/naushad/BricksBreaker/assets/Scripts/PlayScript.ts"],"names":["_decorator","Component","Node","Sprite","Vec3","SpriteFrame","Prefab","instantiate","JsonAsset","Collider2D","Contact2DType","RigidBody2D","UITransform","Vec2","ccclass","property","PlayScript","start","posOfSlider","sliderSprite","getPosition","screenWidth","node","width","tileDetails","asset","json","console","log","collider","ball","getComponent","on","BEGIN_CONTACT","onBeginContact","ballInitialPosition","fetchScript","addBricks","bricksPrefab","data","lev","rows","columns","selfCollider","otherCollider","contact","name","updateBricks","destroyBrick","arrayOfBricksOnScreen","pop","length","setTimeout","level","setPosition","linearVelocity","str","spriteFrame","i","NormalBricks","BrokenBricks","destroy","moveSliderOnTouch","touch","event","current","getUILocation","x","y","onLoad","EventType","TOUCH_MOVE","startX","startY","height","bricksWidth","bricksHeight","scaleX","scaleY","noBricks","k","initX","j","Math","floor","random","ch","addChild","setScale","push","update"],"mappings":"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","sourcesContent":["\r\nimport { _decorator, Component, Node, SpriteComponent, Sprite, Vec3, UIComponent, UIModelComponent, SpriteFrame, Prefab, instantiate, JsonAsset, Collider2D, Contact2DType, IPhysics2DContact, PhysicsSystem2D, RigidBody, RigidBody2D, UITransform, rect, Vec2 } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n/**\r\n * Predefined variables\r\n * Name = PlayScript\r\n * DateTime = Wed Sep 22 2021 13:48:26 GMT+0530 (India Standard Time)\r\n * Author = alokraj0024\r\n * FileBasename = PlayScript.ts\r\n * FileBasenameNoExtension = PlayScript\r\n * URL = db://assets/Scripts/PlayScript.ts\r\n * ManualUrl = https://docs.cocos.com/creator/3.3/manual/en/\r\n * Math.floor(Math.random() * (max - min + 1)) + min;\r\n */\r\n \r\n@ccclass('PlayScript')\r\nexport class PlayScript extends Component {\r\n\r\n    @property(Node)\r\n    sliderSprite : Node = null;\r\n\r\n    @property(Node)\r\n    ball : Node = null;\r\n\r\n    @property(SpriteFrame)\r\n    NormalBricks : SpriteFrame[] = [];\r\n\r\n    @property(SpriteFrame)\r\n    BrokenBricks : SpriteFrame[] = [];\r\n\r\n    @property(Prefab)\r\n    bricksPrefab : Prefab = null;\r\n\r\n    @property(JsonAsset)\r\n    asset : JsonAsset[] = [];\r\n\r\n    @property(SpriteFrame)\r\n    Rewards : SpriteFrame[] = [];\r\n\r\n\r\n    posOfSlider : Vec3 = null;\r\n    screenWidth : any;\r\n    tileDetails: string[] = [];\r\n    titleIndex: number = 1;\r\n    destroyBrick : number = 0;\r\n    arrayOfBricksOnScreen : any[] = [];\r\n    ballInitialPosition : any;\r\n    rows : number = null;\r\n    columns : number = null;\r\n    level : number = 1;\r\n\r\n    start () {\r\n        this.posOfSlider = this.sliderSprite.getPosition();\r\n        this.screenWidth = this.node.width;\r\n        this.tileDetails = this.asset[0].json[\"tileDetails\"];\r\n        console.log('row in the script  ' + this.asset[0].json[\"rows\"]);\r\n\r\n        let collider = this.ball.getComponent(Collider2D)\r\n        if(collider)\r\n        {\r\n            collider.on(Contact2DType.BEGIN_CONTACT,this.onBeginContact,this);\r\n        }\r\n\r\n        this.ballInitialPosition = this.ball.getPosition();\r\n        this.fetchScript(1);\r\n        this.addBricks();\r\n        console.log('printing the tile details  : ');\r\n        // for(let i = 1,k=1;i<=this.asset[0].json['rows'];i++)\r\n        // {\r\n        //     for(let j =1;j<=this.asset[0].json['columns'];j++)\r\n        //     {\r\n        //         console.log(k + \" : \" + this.tileDetails[`${k++}`]);\r\n        //     }\r\n        // }\r\n        console.log('start ended')\r\n        console.log(this.bricksPrefab.data.width);\r\n    }\r\n    fetchScript(lev : number)\r\n    {\r\n        this.tileDetails = this.asset[lev-1].json[\"tileDetails\"];\r\n        this.rows = this.asset[lev-1].json[\"rows\"];\r\n        this.columns = this.asset[lev-1].json[\"columns\"];\r\n    }\r\n\r\n    onBeginContact (selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) \r\n    {\r\n        console.log(otherCollider)\r\n        //console.log(otherCollider.name);\r\n        if(otherCollider.name == 'brick<BoxCollider2D>')\r\n        {\r\n            this.updateBricks(otherCollider);\r\n            this.destroyBrick++;\r\n            if(this.destroyBrick == 2)\r\n            {\r\n                this.arrayOfBricksOnScreen.pop();\r\n                this.destroyBrick = 0;\r\n            }\r\n        }\r\n        if(this.arrayOfBricksOnScreen.length == 0)\r\n        {\r\n            this.arrayOfBricksOnScreen = [];\r\n            setTimeout(() => {\r\n                this.level++;\r\n                this.fetchScript(this.level);\r\n                this.addBricks();\r\n                this.ball.setPosition(this.ballInitialPosition);\r\n                this.ball.getComponent(RigidBody2D).linearVelocity = new Vec2(0,0);\r\n                if(this.level == 3)\r\n                {\r\n                    this.level = 0;\r\n                }\r\n            },500);\r\n        }\r\n    }\r\n\r\n    updateBricks(collider)\r\n    {\r\n        let str = collider.getComponent(Sprite).spriteFrame.name;\r\n        for(let i=0;i<this.NormalBricks.length;i++)\r\n        {\r\n            if(str == this.NormalBricks[i].name)\r\n            {\r\n                collider.getComponent(Sprite).spriteFrame = this.BrokenBricks[i];\r\n                break;\r\n            }\r\n            if(str == this.BrokenBricks[i].name)\r\n            {\r\n                collider.getComponent(Sprite).spriteFrame = this.BrokenBricks[i];\r\n                collider.getComponent(Sprite).destroy();\r\n                collider.destroy();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    moveSliderOnTouch(touch,event)\r\n    {\r\n        let current = touch.getUILocation();\r\n        if(current.x+128>this.screenWidth)\r\n        {\r\n            current.x = this.screenWidth-128;\r\n        }\r\n        else if(current.x-128<0)\r\n        {\r\n            current.x = 128;\r\n        }\r\n        this.sliderSprite.setPosition(new Vec3(current.x-this.screenWidth/2,this.posOfSlider.y,1));\r\n    }\r\n    onLoad()\r\n    {\r\n        this.sliderSprite.on(Node.EventType.TOUCH_MOVE,this.moveSliderOnTouch,this);\r\n    }\r\n\r\n\r\n    addBricks()\r\n    {\r\n        let startX = -((this.screenWidth)/2);\r\n        let startY = (((this.node.getComponent(UITransform).height)/2));\r\n        let bricksWidth = this.screenWidth/this.columns;\r\n        let bricksHeight = (this.bricksPrefab.data.height * bricksWidth)/this.bricksPrefab.data.width;\r\n        startX += bricksWidth/2;\r\n        startY -= bricksHeight/2;\r\n        let scaleX = bricksWidth/this.bricksPrefab.data.width;\r\n        let scaleY = bricksHeight/this.bricksPrefab.data.height;\r\n\r\n        let noBricks = this.tileDetails[\"noBricks\"][0];\r\n        console.log('test no Bricks');\r\n        console.log(noBricks);\r\n        for(let i=1,k=1;i<=this.rows;i++)\r\n        {\r\n            let initX = startX;\r\n            console.log('loop ran');\r\n            for(let j=1;j<=this.columns;j++)\r\n            {\r\n                if(this.tileDetails[`${k}`] != \"hide\")\r\n                {\r\n                let x = Math.floor(Math.random() * (7 - 0 + 1)) + 0;\r\n                let ch = instantiate(this.bricksPrefab);\r\n                this.node.addChild(ch);\r\n                ch.getComponent(Sprite).spriteFrame = this.NormalBricks[x];\r\n                ch.setScale(scaleX,scaleY);\r\n                ch.setPosition(new Vec3(initX,startY,1));\r\n                this.arrayOfBricksOnScreen.push(ch);\r\n                }\r\n                k++;\r\n                initX+=bricksWidth;\r\n            }\r\n            startY-=bricksHeight;\r\n        }\r\n    }\r\n    update()\r\n    {   \r\n        //console.log(this.ball.getPosition())\r\n    }\r\n    // update (deltaTime: number) {\r\n    //     // [4]\r\n    // }\r\n}\r\n\r\n"]}